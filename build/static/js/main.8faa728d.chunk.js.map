{"version":3,"sources":["Requests.js","Story.js","App.js","serviceWorker.js","index.js"],"names":["getStory","id","a","url","req","getTopStories","results","splice","fetch","response","json","data","Story","props","className","href","story","title","by","score","App","useState","topStories","setTopStories","useEffect","stories","topStoriesData","localStorage","getItem","JSON","stringify","console","log","storedItems","parse","forEach","i","length","string_stories","setItem","fetchData","map","index","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8faa728d.chunk.js","sourcesContent":["export let getStory = async (id) => {\n    let url = `https://hacker-news.firebaseio.com/v0/item/${id}.json?print=pretty`;\n    return await req(url);\n}\n\nexport let getTopStories = async () => {\n    let url = \"https://hacker-news.firebaseio.com/v0/topstories.json?print=pretty\";\n    let results = await req(url);\n    results.splice(50);\n    return results;\n}\n\nasync function req(url) {\n    let response = await fetch(url)\n    let data = await response.json();\n    return data;\n}\n","import React from 'react';\nimport \"./App.css\";\n\nfunction Story(props) {\n  return (\n    <div className=\"list-hover md:w-1/2 sm:w-full w-auto m-auto bg-white shadow overflow-hidden\">\n      <a href={props.story.url}>\n        <div className=\"flex\">\n          <div className=\"\">\n            <div className=\"pl-4 pr-4 pt-4 pb-4 py-5 border-b border-gray-200 sm:px-6\">\n                <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                    {props.story.title}\n                </h3>\n                <p className=\"mt-1 max-w-2xl text-sm leading-5 text-gray-500\">\n                  by {props.story.by} \n                </p>\n                <span className=\"mr-2 font-bold text-xs text-green-900 bg-green-200 rounded-full pr-2 pl-2\" >\n                  {props.story.score}\n                  <i className=\"ml-1 fas fa-sort-up\"></i>\n                </span>\n            </div>\n          </div>\n        </div>\n        </a>\n    </div>\n  );\n}\n\nexport default Story;\n","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport { getStory, getTopStories } from \"./Requests\";\nimport Story from \"./Story\";\n\nfunction App() {\n  const [topStories, setTopStories] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      let stories = [];\n      let topStoriesData = await getTopStories();\n      let storedStories = localStorage.getItem('topStories');\n      if (storedStories === JSON.stringify(topStoriesData)) {\n        console.log(\"Using local version\");\n\n        let storedItems = localStorage.getItem('storedItems')\n        storedItems = JSON.parse(storedItems);\n        setTopStories(storedItems);\n      } else {\n        topStoriesData.forEach(async (story, i) => {\n          let data = await getStory(story);\n          stories = [data, ...stories];\n          if (i === (topStoriesData.length - 1)) {\n            setTopStories(stories);\n            let string_stories = JSON.stringify(stories);\n            localStorage.setItem('storedItems', string_stories);\n          }\n        });\n        localStorage.setItem('topStories', JSON.stringify(topStoriesData));\n      }\n\n    }\n\n\n    fetchData();\n\n  }, []);\n\n\n  return (\n    <div className=\"App bg-gray-100 pb-10 px-2\">\n      <h2 className=\"text-indigo-600 text-center text-3xl leading-9 font-extrabold pt-4 mb-8\">tech news</h2>\n      { topStories.map((story, index) =>  <Story key={index} story={story} /> )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/tailwind.css';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}